---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  annotations:
    enonic.applyPriority: "20"
  name: "xp-node-sa"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "Secret"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "60"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "su"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
data:
  pass: "cGFzc3dvcmQ="
  passHash: "YjEwOWYzYmJiYzI0NGViODI0NDE5MTdlZDA2ZDYxOGI5MDA4ZGQwOWIzYmVmZDFiNWUwNzM5NGM3MDZhOGJiOTgwYjFkNzc4NWU1OTc2ZWMwNDliNDZkZjVmMTMyNmFmNWEyZWE2ZDEwM2ZkMDdjOTUzODVmZmFiMGNhY2JjODY="
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "60"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "extra-config"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
data:
  dns.sh: "#!/bin/bash\n\nset -e\n\nusage () {\n    echo \"Usage: $SCRIPT_NAME [OPTIONS]\"\
    \n    echo \"Wait until DNS record is present\"\n    echo \"\"\n    echo \"Options:\"\
    \n    echo \"  -d, --dns=         Record to poll\"\n    echo \"  -t, --timeout=\
    \     Script timeout\"\n    echo \"  -a, --additional=  Additional seconds to\
    \ wait at end\"\n    echo \"  -r, --reverse      Wait until record is gone\"\n\
    \    echo \"  -h, --help         Print usage\"\n    exit 1\n}\n\nDNS=\"\"\nTIMEOUT=\"\
    20\"\nADDITIONAL_WAIT_SECONDS=\"0\"\nREVERSE=\"0\"\n\nwhile [ \"$#\" -gt 0 ];\
    \ do\n    case $1 in\n        -h | --help)\n            usage ;;\n        -d)\n\
    \            shift; DNS=\"$1\" ;;\n        --dns=*)\n            DNS=$(echo $1\
    \ | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -t)\n            shift;\
    \ TIMEOUT=\"$1\" ;;\n        --timeout=*)\n            STATE=$(echo $1 | awk '{split($0,r,\"\
    =\"); print r[2]}') ;;\n        -a)\n            shift; ADDITIONAL_WAIT_SECONDS=\"\
    $1\" ;;\n        --additional=*)\n            ADDITIONAL_WAIT_SECONDS=$(echo $1\
    \ | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -r | --reverse)\n     \
    \       REVERSE=\"1\" ;;\n        *)\n            usage\n            ;;\n    esac\n\
    \    shift\ndone\n\nif [ \"${DNS}\" == \"\" ]; then\n    echo \"Missing dns parameter!\"\
    \n    usage\nfi\n\nif [ \"$REVERSE\" = \"0\" ]; then\n    echo -n \"Waiting for\
    \ DNS record to appear: \"\nelse\n    echo -n \"Waiting for DNS record to be removed:\
    \ \"\nfi\n\necho \"${DNS} [timeout: ${TIMEOUT}, additional: ${ADDITIONAL_WAIT_SECONDS}]\"\
    \n\nOK=\"0\"\nFOUND=\"0\"\n\nSTART_TIME=$(date +%s)\nwhile [ \"$OK\" == \"0\"\
    \ ]; do\n    (dig +short ${DNS} | grep -v -e '^$' > /dev/null) && FOUND=\"1\"\
    \ || true\n\n    if [ \"$FOUND\" == \"1\" ]; then\n        echo \"Record ${DNS}\
    \ found!\"\n        if [ \"${REVERSE}\" == \"0\" ]; then\n            OK=\"1\"\
    \n        fi\n    else\n        echo \"Record ${DNS} not found!\"\n        if\
    \ [ \"${REVERSE}\" == \"1\" ]; then\n            OK=\"1\"\n        fi\n    fi\n\
    \n    TIME=`printf \"%s\\n\" $(( $(date +%s) - ${START_TIME} ))`\n    if [ \"\
    $TIME\" -gt \"$TIMEOUT\" ]; then\n        echo \"Operation timed out!\"\n    \
    \    break\n    fi\n\n    if [ \"$OK\" == \"0\" ]; then\n        sleep 2\n   \
    \ fi\ndone\n\nif [ \"${ADDITIONAL_WAIT_SECONDS}\" != \"0\" ]; then\n    echo \"\
    Waiting for additional ${ADDITIONAL_WAIT_SECONDS} seconds\"\n    sleep ${ADDITIONAL_WAIT_SECONDS}\n\
    fi\n\nif [ \"${OK}\" != \"1\" ]; then\n    exit 1\nfi"
  endpoints.sh: "#!/bin/bash\n\nset -e\n\nusage () {\n    echo \"Usage: $SCRIPT_NAME\
    \ [OPTIONS]\"\n    echo \"Wait until IP has been added to endpoints\"\n    echo\
    \ \"\"\n    echo \"Options:\"\n    echo \"  -s, --service=     Service name\"\n\
    \    echo \"  -i, --ip=          IP address\"\n    echo \"  -t, --timeout=   \
    \  Script timeout\"\n    echo \"  -a, --additional=  Additional seconds to wait\
    \ at end\"\n    echo \"  -r, --reverse      Wait until endpoint is gone\"\n  \
    \  echo \"  -h, --help         Print usage\"\n    exit 1\n}\n\nSERVICE=\"\"\n\
    IP=\"\"\nTIMEOUT=\"20\"\nADDITIONAL_WAIT_SECONDS=\"0\"\nREVERSE=\"0\"\n\nwhile\
    \ [ \"$#\" -gt 0 ]; do\n    case $1 in\n        -h | --help)\n            usage\
    \ ;;\n        -s)\n            shift; SERVICE=\"$1\" ;;\n        --service=*)\n\
    \            SERVICE=$(echo $1 | awk '{split($0,r,\"=\"); print r[2]}') ;;\n \
    \       -i)\n            shift; IP=\"$1\" ;;\n        --ip=*)\n            IP=$(echo\
    \ $1 | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -t)\n            shift;\
    \ TIMEOUT=\"$1\" ;;\n        --timeout=*)\n            STATE=$(echo $1 | awk '{split($0,r,\"\
    =\"); print r[2]}') ;;\n        -a)\n            shift; ADDITIONAL_WAIT_SECONDS=\"\
    $1\" ;;\n        --additional=*)\n            ADDITIONAL_WAIT_SECONDS=$(echo $1\
    \ | awk '{split($0,r,\"=\"); print r[2]}') ;;\n        -r | --reverse)\n     \
    \       REVERSE=\"1\" ;;\n        *)\n            usage\n            ;;\n    esac\n\
    \    shift\ndone\n\nif [ \"${SERVICE}\" == \"\" ]; then\n    echo \"Missing service\
    \ parameter!\"\n    usage\nfi\n\nif [ \"${IP}\" == \"\" ]; then\n    echo \"Missing\
    \ ip parameter!\"\n    usage\nfi\n\nif [ \"$REVERSE\" = \"0\" ]; then\n    echo\
    \ -n \"Waiting for endpoint ${IP} to appear in service ${SERVICE}: \"\nelse\n\
    \    echo -n \"Waiting for endpoint ${IP} to be removed in service ${SERVICE}:\
    \ \"\nfi\n\necho \"${SERVICE} [timeout: ${TIMEOUT}, additional: ${ADDITIONAL_WAIT_SECONDS}]\"\
    \n\nOK=\"0\"\nFOUND=\"0\"\n\nSTART_TIME=$(date +%s)\nwhile [ \"$OK\" == \"0\"\
    \ ]; do\n    (curl -s -H \"Authorization: Bearer `cat /run/secrets/kubernetes.io/serviceaccount/token`\"\
    \ --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes.default.svc.cluster.local/api/v1/namespaces/`cat\
    \ /run/secrets/kubernetes.io/serviceaccount/namespace`/endpoints/${SERVICE} |\
    \ grep ${IP} > /dev/null) && FOUND=\"1\" || true\n\n    if [ \"$FOUND\" == \"\
    1\" ]; then\n        echo \"IP ${IP} in service ${SERVICE} found!\"\n        if\
    \ [ \"${REVERSE}\" == \"0\" ]; then\n            OK=\"1\"\n        fi\n    else\n\
    \        echo \"IP ${IP} in service ${SERVICE} not found!\"\n        if [ \"${REVERSE}\"\
    \ == \"1\" ]; then\n            OK=\"1\"\n        fi\n    fi\n\n    TIME=`printf\
    \ \"%s\\n\" $(( $(date +%s) - ${START_TIME} ))`\n    if [ \"$TIME\" -gt \"$TIMEOUT\"\
    \ ]; then\n        echo \"Operation timed out!\"\n        break\n    fi\n\n  \
    \  if [ \"$OK\" == \"0\" ]; then\n        sleep 2\n    fi\ndone\n\nif [ \"${ADDITIONAL_WAIT_SECONDS}\"\
    \ != \"0\" ]; then\n    echo \"Waiting for additional ${ADDITIONAL_WAIT_SECONDS}\
    \ seconds\"\n    sleep ${ADDITIONAL_WAIT_SECONDS}\nfi\n\nif [ \"${OK}\" != \"\
    1\" ]; then\n    exit 1\nfi"
  preStart.sh: "echo \"Running prescript for node ${XP_NODE_NAME} (${XP_NODE_IP})\"\
    \necho \"Bootstrap deploy folder apps\"\ncat /enonic-xp/home/extra-config/initApps.txt\
    \ | xargs -I {} app.sh add {}\nbash /enonic-xp/home/extra-config/dns.sh -d cluster-discovery.${NAMESPACE}.svc.cluster.local\n\
    bash /enonic-xp/home/extra-config/dns.sh -d ${XP_NODE_NAME}.cluster-discovery.${NAMESPACE}.svc.cluster.local"
  preStop.sh: "echo \"Wait for endpoints to be deleted\"\nbash /enonic-xp/home/extra-config/endpoints.sh\
    \ -r -s all -i ${XP_NODE_IP} -t 10\nbash /enonic-xp/home/extra-config/endpoints.sh\
    \ -r -s ${XP_NODE_GROUP} -i ${XP_NODE_IP} -t 10 -a 20"
  initApps.txt: "https://repo.enonic.com/public/com/enonic/app/snapshotter/3.0.0/snapshotter-3.0.0.jar"
  java.security.properties: "networkaddress.cache.ttl=30"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "50"
  labels:
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
data: {}
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  annotations:
    enonic.applyPriority: "10"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "blobstore"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
  - "ReadWriteMany"
  resources:
    requests:
      storage: "2Gi"
  storageClassName: "standard"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  annotations:
    enonic.applyPriority: "10"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "snapshots"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
  - "ReadWriteMany"
  resources:
    requests:
      storage: "3Gi"
  storageClassName: "standard"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  annotations:
    enonic.applyPriority: "30"
  name: "xp-node-role"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
rules:
- apiGroups:
  - "*"
  resources:
  - "endpoints"
  verbs:
  - "get"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  annotations:
    enonic.applyPriority: "40"
  name: "xp-node-role-bindings"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "xp-node-role"
subjects:
- kind: "ServiceAccount"
  name: "xp-node-sa"
  namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "cluster-discovery"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
  - name: "hazelcast"
    port: 5701
    protocol: "TCP"
    targetPort: 5701
  - name: "es"
    port: 9300
    protocol: "TCP"
    targetPort: 9300
  publishNotReadyAddresses: true
  selector:
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
  - name: "xp-metrics"
    port: 2609
    protocol: "TCP"
    targetPort: 2609
  - name: "xp-management"
    port: 4848
    protocol: "TCP"
    targetPort: 4848
  - name: "xp-main"
    port: 8080
    protocol: "TCP"
    targetPort: 8080
  - name: "es-api"
    port: 9200
    protocol: "TCP"
    targetPort: 9200
  publishNotReadyAddresses: false
  selector:
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations:
    enonic.applyPriority: "100"
  labels:
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
  - name: "xp-metrics"
    port: 2609
    protocol: "TCP"
    targetPort: 2609
  - name: "xp-management"
    port: 4848
    protocol: "TCP"
    targetPort: 4848
  - name: "xp-main"
    port: 8080
    protocol: "TCP"
    targetPort: 8080
  - name: "es-api"
    port: 9200
    protocol: "TCP"
    targetPort: 9200
  publishNotReadyAddresses: false
  selector:
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  annotations:
    enonic.applyPriority: "90"
  labels:
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
spec:
  podManagementPolicy: "Parallel"
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      enonic.managed: "true"
      enonic.nodeGroup: "fisk"
      cloud: "mycloud"
      environment: "myenv"
      service: "myservice"
      solution: "mysolution"
  serviceName: "cluster-discovery"
  template:
    metadata:
      annotations:
        enonic.cloud/metrics.xp7: "true"
        enonic.cloud/logs.xp7: "true"
        backup.velero.io/backup-volumes: "blobstore,snapshots"
        pre.hook.backup.velero.io/container: "exp"
        pre.hook.backup.velero.io/command: "[\"bash\", \"-c\", \"/usr/local/bin/backup.sh\"\
          ]"
      labels:
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
    spec:
      containers:
      - env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        - name: "XP_NODE_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "XP_NODE_GROUP"
          value: "fisk"
        - name: "XP_CLUSTERED"
          value: "false"
        - name: "XP_NODE_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.podIP"
        - name: "SU_PASS_HASH"
          valueFrom:
            secretKeyRef:
              key: "passHash"
              name: "su"
              optional: false
        - name: "JAVA_OPTS"
          value: "-Djava.security.properties=/enonic-xp/home/extra-config/java.security.properties\
            \ -XX:+UseContainerSupport -XX:MinRAMPercentage=20 -XX:InitialRAMPercentage=30\
            \ -XX:MaxRAMPercentage=75 -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled\
            \ -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=60\
            \ -XX:+ScavengeBeforeFullGC -XX:+CMSScavengeBeforeRemark -XX:-HeapDumpOnOutOfMemoryError\
            \ -XX:HeapDumpPath=/enonic-xp/home/data/oom.hprof"
        image: "enonic/xp:7.1.2-ubuntu"
        imagePullPolicy: "IfNotPresent"
        lifecycle:
          preStop:
            exec:
              command:
              - "/bin/bash"
              - "/enonic-xp/home/extra-config/preStop.sh"
        name: "exp"
        ports:
        - containerPort: 2609
          name: "xp-stats"
          protocol: "TCP"
        - containerPort: 8080
          name: "xp-main"
          protocol: "TCP"
        - containerPort: 9200
          name: "es-http"
          protocol: "TCP"
        - containerPort: 9300
          name: "es-transport"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 2
          httpGet:
            path: "/_cluster/health?wait_for_status=yellow&timeout=1s"
            port: 9200
            scheme: "HTTP"
          initialDelaySeconds: 20
          periodSeconds: 5
          successThreshold: 3
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
          requests:
            cpu: "1"
            memory: "512Mi"
        securityContext:
          capabilities:
            drop:
            - "ALL"
          runAsNonRoot: true
          runAsUser: 1337
          sysctls:
          - name: "vm.max_map_count"
            value: "262144"
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: "File"
        volumeMounts:
        - mountPath: "/enonic-xp/home/config"
          name: "config"
        - mountPath: "/enonic-xp/home/extra-config"
          name: "extra-config"
        - mountPath: "/enonic-xp/home/setenv.sh"
          name: "extra-config"
          subPath: "preStart.sh"
        - mountPath: "/enonic-xp/home/data"
          name: "export"
        - mountPath: "/enonic-xp/home/repo/index"
          name: "index"
        - mountPath: "/enonic-xp/home/work"
          name: "work"
        - mountPath: "/enonic-xp/home/repo/blob"
          name: "blobstore"
        - mountPath: "/enonic-xp/home/snapshots"
          name: "snapshots"
      dnsPolicy: "ClusterFirst"
      restartPolicy: "Always"
      schedulerName: "default-scheduler"
      securityContext:
        fsGroup: 0
      serviceAccountName: "xp-node-sa"
      terminationGracePeriodSeconds: 600
      volumes:
      - configMap:
          defaultMode: 420
          name: "fisk"
        name: "config"
      - configMap:
          defaultMode: 420
          name: "extra-config"
        name: "extra-config"
      - name: "blobstore"
        persistentVolumeClaim:
          claimName: "blobstore"
      - name: "snapshots"
        persistentVolumeClaim:
          claimName: "snapshots"
  updateStrategy:
    type: "RollingUpdate"
  volumeClaimTemplates:
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      labels:
        velero.io/exclude-from-backup: "true"
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
      name: "export"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "234Mi"
      storageClassName: "standard"
      volumeMode: "Filesystem"
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      labels:
        velero.io/exclude-from-backup: "true"
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
      name: "index"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "200Mi"
      storageClassName: "standard"
      volumeMode: "Filesystem"
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      labels:
        velero.io/exclude-from-backup: "true"
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
      name: "work"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "400Mi"
      storageClassName: "standard"
      volumeMode: "Filesystem"
---
spec:
  nodeGroup: "all"
  file: "system.properties"
  data: "xp.name = mycloud-mysolution-myenv-myservice\nxp.suPassword = {sha512}${env.SU_PASS_HASH}\n\
    xp.init.adminUserCreation = false"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "70"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-system"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.app.main.cfg"
  data: "tourDisabled = true"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "70"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-admin"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.web.sessionstore.cfg"
  data: "storeMode=non-persistent"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "70"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-sessionstore"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "all"
  file: "com.enonic.app.status.cfg"
  data: "metricsUrl = http://localhost:2609/"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.applyPriority: "70"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-appstatus"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "all"
  file: "com.enonic.xp.cluster.cfg"
  data: "network.host=${env.XP_NODE_IP},127.0.0.1\nnetwork.publish.host=${env.XP_NODE_IP}\n\
    node.name=${env.XP_NODE_NAME}\ncluster.enabled=false"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.applyPriority: "70"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-cluster"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "all"
  file: "logback.xml"
  data: "<?xml version=\"1.0\"?>\n<configuration scan=\"true\" scanPeriod=\"60 seconds\"\
    >\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\
    >\n    <file>${xp.home}/logs/server.log</file>\n    <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"\
    >\n      <fileNamePattern>${xp.home}/logs/server.%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n\
    \      <maxFileSize>100MB</maxFileSize>\n      <maxHistory>7</maxHistory>\n  \
    \    <totalSizeCap>3GB</totalSizeCap>\n    </rollingPolicy>\n    <encoder>\n \
    \     <pattern>%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n</pattern>\n    </encoder>\n\
    \  </appender>\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\
    >\n    <withJansi>true</withJansi>\n    <encoder>\n      <pattern>%date{ISO8601}\
    \ %highlight(%-5level) %cyan(%logger{36}) - %msg%n</pattern>\n    </encoder>\n\
    \  </appender>\n\n  <root level=\"info\">\n    <appender-ref ref=\"STDOUT\"/>\n\
    \    <appender-ref ref=\"FILE\"/>\n  </root>\n\n  <logger name=\"Events.Service\"\
    \ level=\"WARN\" additivity=\"false\">\n    <appender-ref ref=\"STDOUT\"/>\n \
    \   <appender-ref ref=\"FILE\"/>\n  </logger>\n\n  <logger name=\"Events.Bundle\"\
    \ level=\"WARN\" additivity=\"false\">\n    <appender-ref ref=\"STDOUT\"/>\n \
    \   <appender-ref ref=\"FILE\"/>\n  </logger>\n\n</configuration>"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "70"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-logback"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "fisk"
  file: "com.enonic.xp.web.vhost.cfg"
  data: "enabled = true"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
    enonic.applyPriority: "71"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk-vhosts"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  nodeGroup: "fisk"
  file: "com.enonic.xp.elasticsearch.cfg"
  data: "http.enabled=true\ncluster.name=mycloud-mysolution-myenv-myservice"
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.applyPriority: "71"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk-elasticsearch"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  host: "healthcheck"
  options:
    dnsRecord: false
    cdn: false
  mappings:
  - nodeGroup: "all"
    source: "/"
    target: "/webapp/com.enonic.app.alive"
    options:
      ingress: false
      ipWhitelist: []
kind: "Xp7VHost"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.applyPriority: "80"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-healthcheck"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
---
spec:
  host: "localhost"
  options:
    dnsRecord: false
    cdn: false
  mappings:
  - nodeGroup: "all"
    source: "/"
    target: "/"
    idProviders:
      default: "system"
      enabled: []
    options:
      ingress: false
      ipWhitelist: []
kind: "Xp7VHost"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.applyPriority: "80"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-localhost"
  namespace: "mycloud-mysolution-myenv-myservice"
  ownerReferences:
  - apiVersion: "enonic.cloud/v1alpha2"
    kind: "Xp7Deployment"
    blockOwnerDeletion: false
    controller: true
    name: "mycloud-mysolution-myenv-myservice"
