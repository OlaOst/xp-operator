---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "extra-config"
  namespace: "mycloud-mysolution-myenv-myservice"
data:
  init.sh: "# Install initApps\ncat /enonic-xp/home/extra-config/initApps.txt | xargs\
    \ -I {} app.sh add {}"
  initApps.txt: "https://repo.enonic.com/public/com/enonic/app/alive/2.0.0/alive-2.0.0.jar\n\
    https://repo.enonic.com/public/com/enonic/app/snapshotter/2.1.1/snapshotter-2.1.1.jar"
  java.security.properties: "networkaddress.cache.ttl=30"
---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "blobstore"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
  - "ReadWriteMany"
  resources:
    requests:
      storage: "2Gi"
  storageClassName: "standard"
---
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "snapshots"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  accessModes:
  - "ReadWriteMany"
  resources:
    requests:
      storage: "3Gi"
  storageClassName: "standard"
---
apiVersion: "v1"
kind: "Secret"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "su"
  namespace: "mycloud-mysolution-myenv-myservice"
data:
  pass: "cGFzc3dvcmQ="
  passHash: "YjEwOWYzYmJiYzI0NGViODI0NDE5MTdlZDA2ZDYxOGI5MDA4ZGQwOWIzYmVmZDFiNWUwNzM5NGM3MDZhOGJiOTgwYjFkNzc4NWU1OTc2ZWMwNDliNDZkZjVmMTMyNmFmNWEyZWE2ZDEwM2ZkMDdjOTUzODVmZmFiMGNhY2JjODY="
---
apiVersion: "v1"
kind: "Service"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
  - name: "xp-metrics"
    port: 2609
    protocol: "TCP"
    targetPort: 2609
  - name: "xp-management"
    port: 4848
    protocol: "TCP"
    targetPort: 4848
  - name: "xp-main"
    port: 8080
    protocol: "TCP"
    targetPort: 8080
  - name: "es-api"
    port: 9200
    protocol: "TCP"
    targetPort: 9200
  - name: "es-transport"
    port: 9300
    protocol: "TCP"
    targetPort: 9300
  publishNotReadyAddresses: true
  selector:
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "v1"
kind: "Service"
metadata:
  labels:
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  clusterIP: "None"
  ports:
  - name: "xp-metrics"
    port: 2609
    protocol: "TCP"
    targetPort: 2609
  - name: "xp-management"
    port: 4848
    protocol: "TCP"
    targetPort: 4848
  - name: "xp-main"
    port: 8080
    protocol: "TCP"
    targetPort: 8080
  - name: "es-api"
    port: 9200
    protocol: "TCP"
    targetPort: 9200
  - name: "es-transport"
    port: 9300
    protocol: "TCP"
    targetPort: 9300
  publishNotReadyAddresses: true
  selector:
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  sessionAffinity: "None"
  type: "ClusterIP"
---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  labels:
    enonic.managed: "true"
    enonic.nodeGroup: "fisk"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  podManagementPolicy: "Parallel"
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      enonic.managed: "true"
      enonic.nodeGroup: "fisk"
      cloud: "mycloud"
      environment: "myenv"
      service: "myservice"
      solution: "mysolution"
  serviceName: "all"
  template:
    metadata:
      annotations:
        enonic.cloud/metrics.xp7: "true"
        enonic.cloud/logs.xp7: "true"
        backup.velero.io/backup-volumes: "blobstore,snapshots"
        pre.hook.backup.velero.io/container: "exp"
        pre.hook.backup.velero.io/command: "[\"bash\", \"-c\", \"/usr/local/bin/backup.sh\"\
          ]"
      labels:
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
    spec:
      containers:
      - env:
        - name: "XP_NODE_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "XP_NODE_IP"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "status.podIP"
        - name: "SU_PASS_HASH"
          valueFrom:
            secretKeyRef:
              key: "passHash"
              name: "su"
              optional: false
        - name: "JAVA_OPTS"
          value: "-Djava.security.properties=/enonic-xp/home/extra-config/java.security.properties\
            \ -XX:+UseContainerSupport -XX:MinRAMPercentage=20 -XX:InitialRAMPercentage=30\
            \ -XX:MaxRAMPercentage=50 -Djsse.enableSNIExtension=true -XX:+UseConcMarkSweepGC\
            \ -XX:+CMSParallelRemarkEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=60\
            \ -XX:+ScavengeBeforeFullGC -XX:+CMSScavengeBeforeRemark -XX:-HeapDumpOnOutOfMemoryError\
            \ -XX:HeapDumpPath=/enonic-xp/home/exports/dumps/oom.hprof"
        image: "gbbirkisson/xp:7.1.2-ubuntu"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          failureThreshold: 4
          httpGet:
            httpHeaders:
            - name: "Host"
              value: "healthcheck"
            path: "/"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 60
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 1
        name: "exp"
        ports:
        - containerPort: 2609
          name: "xp-stats"
          protocol: "TCP"
        - containerPort: 8080
          name: "xp-main"
          protocol: "TCP"
        - containerPort: 9200
          name: "es-http"
          protocol: "TCP"
        - containerPort: 9300
          name: "es-transport"
          protocol: "TCP"
        readinessProbe:
          failureThreshold: 12
          httpGet:
            httpHeaders:
            - name: "Host"
              value: "healthcheck"
            path: "/"
            port: 8080
            scheme: "HTTP"
          initialDelaySeconds: 45
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
          requests:
            cpu: "1"
            memory: "512Mi"
        securityContext:
          capabilities:
            drop:
            - "ALL"
          runAsNonRoot: true
          runAsUser: 1337
          sysctls:
          - name: "vm.max_map_count"
            value: "262144"
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: "File"
        volumeMounts:
        - mountPath: "/enonic-xp/home/config"
          name: "config"
        - mountPath: "/enonic-xp/home/extra-config"
          name: "extra-config"
        - mountPath: "/enonic-xp/home/deploy"
          name: "deploy"
        - mountPath: "/enonic-xp/home/data"
          name: "export"
        - mountPath: "/enonic-xp/home/repo/index"
          name: "index"
        - mountPath: "/enonic-xp/home/work"
          name: "work"
        - mountPath: "/enonic-xp/home/repo/blob"
          name: "blobstore"
        - mountPath: "/enonic-xp/home/snapshots"
          name: "snapshots"
      dnsPolicy: "ClusterFirst"
      initContainers:
      - command:
        - "bash"
        - "/enonic-xp/home/extra-config/init.sh"
        image: "gbbirkisson/xp:7.1.2-ubuntu"
        imagePullPolicy: "IfNotPresent"
        name: "init-script"
        resources: {}
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: "File"
        volumeMounts:
        - mountPath: "/enonic-xp/home/extra-config"
          name: "extra-config"
        - mountPath: "/enonic-xp/home/deploy"
          name: "deploy"
      - command:
        - "ash"
        - "-c"
        - "sleep 2; x=\"0\"; while [ \"$x\" == \"0\" ]; do nslookup ${XP_NODE_NAME}.all.mycloud-mysolution-myenv-myservice.svc.cluster.local\
          \ && x=\"1\"; sleep 2; done"
        env:
        - name: "XP_NODE_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        image: "alpine:3.10"
        imagePullPolicy: "IfNotPresent"
        name: "wait-for-dns"
        resources: {}
        terminationMessagePath: "/dev/termination-log"
        terminationMessagePolicy: "File"
      restartPolicy: "Always"
      schedulerName: "default-scheduler"
      securityContext:
        fsGroup: 0
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: "fisk"
        name: "config"
      - configMap:
          defaultMode: 420
          name: "extra-config"
        name: "extra-config"
      - emptyDir: {}
        name: "deploy"
      - name: "blobstore"
        persistentVolumeClaim:
          claimName: "blobstore"
      - name: "snapshots"
        persistentVolumeClaim:
          claimName: "snapshots"
  updateStrategy:
    type: "RollingUpdate"
  volumeClaimTemplates:
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      labels:
        velero.io/exclude-from-backup: "true"
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
      name: "export"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "234Mi"
      storageClassName: "standard"
      volumeMode: "Filesystem"
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      labels:
        velero.io/exclude-from-backup: "true"
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
      name: "index"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "200Mi"
      storageClassName: "standard"
      volumeMode: "Filesystem"
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      labels:
        velero.io/exclude-from-backup: "true"
        enonic.managed: "true"
        enonic.nodeGroup: "fisk"
        cloud: "mycloud"
        environment: "myenv"
        service: "myservice"
        solution: "mysolution"
      name: "work"
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "400Mi"
      storageClassName: "standard"
      volumeMode: "Filesystem"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-admin"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.xp.app.main.cfg"
  nodeGroup: "all"
  data: "tourDisabled = true"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-appstatus"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.app.status.cfg"
  nodeGroup: "all"
  data: "metricsUrl = http://localhost:2609/"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-cluster"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.xp.cluster.cfg"
  nodeGroup: "all"
  data: "cluster.enabled=false"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-deploy"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.xp.server.deploy.cfg"
  nodeGroup: "all"
  data: ""
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-sessionstore"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.xp.web.sessionstore.cfg"
  nodeGroup: "all"
  data: "storeMode=non-persistent"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "all-system"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "system.properties"
  nodeGroup: "all"
  data: "xp.name = mycloud-mysolution-myenv-myservice\nxp.suPassword = {sha512}${env.SU_PASS_HASH}\n\
    xp.init.adminUserCreation = false"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk-elasticsearch"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.xp.elasticsearch.cfg"
  nodeGroup: "fisk"
  data: "http.enabled=false\ncluster.name=mycloud-mysolution-myenv-myservice"
---
kind: "Xp7Config"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  annotations:
    enonic.neverOverwrite: "true"
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "fisk-vhosts"
  namespace: "mycloud-mysolution-myenv-myservice"
spec:
  file: "com.enonic.xp.web.vhost.cfg"
  nodeGroup: "fisk"
  data: ""
---
kind: "Xp7VHost"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "healthcheck"
  namespace: "mycloud-mysolution-myenv-myservice"
status: null
spec:
  host: "healthcheck"
  options:
    ingress: false
    ingressMaxBodySize: "100m"
    dnsRecord: false
    statusCake: false
    caching: false
    cdn: false
    ipWhitelist: ""
  certificate: null
  mappings:
  - nodeGroup: "all"
    source: "/"
    target: "/webapp/com.enonic.app.alive"
    idProviders: null
---
kind: "Xp7VHost"
apiVersion: "enonic.cloud/v1alpha2"
metadata:
  labels:
    enonic.managed: "true"
    cloud: "mycloud"
    environment: "myenv"
    service: "myservice"
    solution: "mysolution"
  name: "localhost"
  namespace: "mycloud-mysolution-myenv-myservice"
status: null
spec:
  host: "localhost"
  options:
    ingress: false
    ingressMaxBodySize: "100m"
    dnsRecord: false
    statusCake: false
    caching: false
    cdn: false
    ipWhitelist: ""
  certificate: null
  mappings:
  - nodeGroup: "all"
    source: "/"
    target: "/"
    idProviders:
      default: "system"
      enabled: []
