# Create StatefulSet for each nodeGroup
{{- range $nodeGroupName, $nodeGroup := .Values.deployment.spec.nodeGroups }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $nodeGroupName }}
  namespace: {{ $.Values.deployment.namespace }}
  labels:
    {{ $.Values.labelKeys.managed }}: true
    {{ $.Values.labelKeys.nodeGroup }}: {{ $nodeGroupName }}
    {{- with $.Values.defaultLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: all
  replicas: {{ if $.Values.deployment.spec.enabled }}{{ $nodeGroup.replicas }}{{ else }}0{{end}}
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  updateStrategy:
    type: {{ $.Values.updateStrategy }}
  selector:
    matchLabels:
      {{ $.Values.labelKeys.managed }}: true
      {{ $.Values.labelKeys.nodeGroup }}: {{ $nodeGroupName }}
      {{- with $.Values.defaultLabels }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  template:
    metadata:
      annotations:
        enonic.cloud/metrics.xp7: "true"
        enonic.cloud/logs.xp7: "true"
        backup.velero.io/backup-volumes: "{{- join "," $.Values.volumeBackups }}"
        pre.hook.backup.velero.io/container: "exp"
        pre.hook.backup.velero.io/command: '["bash", "-c", "/usr/local/bin/backup.sh"]'
        {{- if index $.Values "extensions.linkerd" }}
        linkerd.io/inject: enabled
        {{- end }}
      labels:
        {{ $.Values.labelKeys.managed }}: true
        {{ $.Values.labelKeys.nodeGroup }}: {{ $nodeGroupName }}
        {{- with $.Values.defaultLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}

      securityContext:
        fsGroup: {{ $.Values.securityContext.fsGroup }}

      initContainers:
        # Run init script in the extra-config configmap
        - name: init-script
          image: {{ $.Values.imageTemplate | replace "%s" $.Values.deployment.spec.xpVersion }}
          imagePullPolicy: IfNotPresent
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          resources: {}
          volumeMounts:
            - name: extra-config
              mountPath: {{ $.Values.extraConfigLocation }}
            - name: deploy
              mountPath: {{ $.Values.deployLocation }}
          command:
            - bash
            - {{ $.Values.extraConfigLocation }}/init.sh

        # This init container waits for the Kube DNS entry so the XP node does not get the exception: Cannot create host entry for value
        - name: wait-for-dns
          image: {{ $.Values.initContainersImage }}
          imagePullPolicy: IfNotPresent
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          resources: {}
          env:
            - name: XP_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          command:
            - ash
            - -c
            - sleep 2; x="0"; while [ "$x" == "0" ]; do nslookup ${XP_NODE_NAME}.{{ $.Values.allNodesKey }}.{{ $.Values.deployment.namespace }}.svc.cluster.local && x="1"; sleep 2; done

      containers:
        - name: exp
          image: {{ $.Values.imageTemplate | replace "%s" $.Values.deployment.spec.xpVersion }}
          imagePullPolicy: {{ $.Values.imagePullPolicy }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File

          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: {{ $.Values.securityContext.user }}
            sysctls:
              - name: vm.max_map_count
                value: "262144"

          resources:
            requests:
              cpu: {{ if $.Values.resources.cpu.defaultRequests }}{{ $.Values.resources.cpu.defaultRequests }}{{ else }}{{ $nodeGroup.resources.cpu }}{{ end }}
              memory: {{ if $.Values.resources.memory.defaultRequests }}{{ $.Values.resources.memory.defaultRequests }}{{ else }}{{ $nodeGroup.resources.memory }}{{ end }}
            limits:
              cpu: {{ $nodeGroup.resources.cpu }}
              memory: {{ $nodeGroup.resources.memory }}

          ports:
            - name: xp-stats
              containerPort: 2609
              protocol: TCP
            - name: xp-main
              containerPort: 8080
              protocol: TCP
            - name: es-http
              containerPort: 9200
              protocol: TCP
            - name: es-transport
              containerPort: 9300
              protocol: TCP

          env:
            - name: XP_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: XP_NODE_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: SU_PASS_HASH
              valueFrom:
                secretKeyRef:
                  name: su
                  key: passHash
                  optional: false
          {{- range $key, $value := $nodeGroup.env }}
            - name: {{ $key }}
              value: {{ $value }}
          {{- end }}
          {{- if not (index $nodeGroup.env "JAVA_OPTS") }}
            - name: JAVA_OPTS
              value: '-Djava.security.properties={{ $.Values.extraConfigLocation }}/java.security.properties -XX:+UseContainerSupport -XX:MinRAMPercentage=20 -XX:InitialRAMPercentage=30
                          -XX:MaxRAMPercentage={{ if and $nodeGroup.master (not $nodeGroup.data) }}75{{ else }}50{{ end }} -Djsse.enableSNIExtension=true -XX:+UseConcMarkSweepGC
                          -XX:+CMSParallelRemarkEnabled -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=60
                          -XX:+ScavengeBeforeFullGC -XX:+CMSScavengeBeforeRemark -XX:-HeapDumpOnOutOfMemoryError
                          -XX:HeapDumpPath={{ $.Values.heapDumpLocation }}/oom.hprof'
          {{- end }}
          livenessProbe:
            {{- with $.Values.livenessProbe }}
            {{- toYaml . | nindent 12 }}
            {{- end }}

          readinessProbe:
            {{- with $.Values.readinessProbe }}
            {{- toYaml . | nindent 12 }}
            {{- end }}

          volumeMounts:
            - name: config
              mountPath: {{ $.Values.configLocation }}
            - name: extra-config
              mountPath: {{ $.Values.extraConfigLocation }}
            - name: deploy
              mountPath: {{ $.Values.deployLocation }}
            {{- range $volumeName, $volumeSize := $nodeGroup.resources.disks }}
            - name: {{ $volumeName }}
              mountPath: {{ index $.Values.volumeMounts $volumeName }}
            {{- end }}
            {{- range $volumeName, $volumeSize := $.Values.deployment.spec.nodesSharedDisks }}
            - name: {{ $volumeName }}
              mountPath: {{ index $.Values.volumeMounts $volumeName }}
            {{- end }}
      volumes:
        - name: config
          configMap:
            defaultMode: "420"
            name: {{ $nodeGroupName }}
        - name: extra-config
          configMap:
            defaultMode: "420"
            name: extra-config
        - name: deploy
          emptyDir: {}
        {{- range $volumeName, $volumeSize := $.Values.deployment.spec.nodesSharedDisks }}
        - name: {{ $volumeName }}
          persistentVolumeClaim:
            claimName: {{ $volumeName }}
        {{- end }}

  volumeClaimTemplates:
    {{- range $volumeName, $volumeSize := $nodeGroup.resources.disks }}
    - metadata:
        name: {{ $volumeName }}
        annotations:
          {{- with $.Values.storage.default.annotations }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        labels:
          {{- if not (has $volumeName $.Values.volumeBackups) }}
          velero.io/exclude-from-backup: true
          {{- end }}
          {{ $.Values.labelKeys.managed }}: true
          {{ $.Values.labelKeys.nodeGroup }}: {{ $nodeGroupName }}
          {{- with $.Values.defaultLabels }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      spec:
        volumeMode: Filesystem
        storageClassName: {{ $.Values.storage.default.storageClassName }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ $volumeSize }}
    {{- end }}
---
{{- end }}