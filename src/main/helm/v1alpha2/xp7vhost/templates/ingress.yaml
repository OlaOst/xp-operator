# Create ingress
{{- if .Values.vhost.spec.options.ingress }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Values.vhost.name }}
  labels:
    {{ $.Values.labels.managed }}: true
    {{- with $.Values.defaultLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: {{ .Values.vhost.spec.options.ingressMaxBodySize }}
    ingress.kubernetes.io/rewrite-target: /
    {{- if .Values.vhost.spec.options.dnsRecord }}
    enonic.cloud/dns.hostname: {{ .Values.vhost.spec.host }}
    {{- end }}
    {{- if .Values.vhost.spec.options.statusCake }}
    monitor.stakater.com/enabled: "true"
    {{- end }}
    {{- if .Values.vhost.issuer }}
    cert-manager.io/cluster-issuer: {{ .Values.vhost.issuer }}
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    {{- end }}

    {{- if .Values.extensions.ingress.DDOS.enabled }}
    nginx.ingress.kubernetes.io/limit-connections: {{ .Values.extensions.ingress.DDOS.limitConnections }}
    nginx.ingress.kubernetes.io/limit-rpm: {{ .Values.extensions.ingress.DDOS.limitRpm }}
    {{- end }}

    {{- if .Values.extensions.ingress.stickySession.enabled }}
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-name: {{ .Values.vhost.name }}
    {{- end }}

    {{- if .Values.extensions.ingress.caching.enabled }}
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    {{- end }}

    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Extra config
      {{- if .Values.extensions.ingress.caching.enabled }}
      proxy_cache static-cache;
      proxy_cache_valid any 60m;
      proxy_cache_use_stale error timeout updating http_404 http_500 http_502 http_503 http_504;
      proxy_cache_bypass $http_x_purge;
      add_header X-Cache-Status $upstream_cache_status;
      {{- end }}
      {{- if .Values.extensions.linkerd.enabled }}
      proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
      {{- end }}

spec:
  rules:
    - host: {{ .Values.vhost.spec.host }}
      http:
        paths:
          {{- range $mapping := .Values.vhost.spec.mappings }}
          - backend:
              serviceName: {{ $mapping.nodeGroup }}
              servicePort: 8080
            path: {{ $mapping.source }}
          {{- end }}
  {{- if .Values.vhost.issuer }}
  tls:
    - hosts:
        - {{ .Values.vhost.spec.host }}
      secretName: {{ .Values.vhost.name }}
  {{- end }}
---
{{- end }}